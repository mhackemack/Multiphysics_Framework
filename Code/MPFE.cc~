/* 
================================================================================

Code:		    Multi-Physics Finite Element (MPFE)
Author: 	    Michael W. Hackemack
Institution:	Texas A&M University
Dates:		    2012, 2013

Comments:	    TBA

================================================================================
*/

// General Include Files
#include "Global/Constants.h"
#include "Global/Defaults.h"
#include "Global/GlobalHeaders.h"
#include "Global/Deal2Headers.h"

// Additional Include Files
#include "Driver.h"
#include "MISC/Error.h"
#include "InputOutput/PrintStatements.h"
#include "InputOutput/ParameterHandlerFunctions.h"

// -------------------------
//       Main Routine      
// -------------------------
int main (int argc, char ** argv)
{
  try
    {
      deallog.depth_console (0);
      
      Assert(argc == 2, ExcIndexRange (argc, 2, 2));cout <<argc<<std::endl;
      std::string project_name = argv[1];
      
      // Initialize Miscellaneous Classes and Variables
      Timer timer;
      timer.start ();
      
      // Print Code Heading
      print_heading ();
      
      std::string folder_path = Constants::input_str + project_name + "/";
      
      const unsigned int ndim = get_project_dimension (folder_path);
      const unsigned int fe_degree = get_fe_degree (folder_path);
      
      if (ndim == 2)
      {
          const unsigned int dim = 2;
          Timer timer2; timer2.start ();
          print_input_in_header ();
          
          // Collect Problem Input Data and Initialize Problem
          Driver<dim>::Parameters driver_param;
          driver_param.get_parameters (project_name);
          Driver<dim> driver (driver_param);
          
          // Print Input Closer
          print_input_out_header (timer2 ());
          
          // Run Problem
          driver.execute_problem ();
          
      }
      else if (ndim == 3)
      {
          const unsigned int dim = 3;
          Timer timer2; timer2.start ();
          print_input_in_header ();
          
          // Collect Problem Input Data and Initialize Problem
          Driver<dim>::Parameters driver_param;
          driver_param.get_parameters (project_name);
          Driver<dim> driver (driver_param);
          
          // Print Input Closer
          print_input_out_header (timer2 ());
          
          // Run Problem
          driver.execute_problem ();
          
      }
      
      print_closing (timer ());
      
    }
  catch (std::exception &exc)
    {
      std::cerr << std::endl << std::endl
                << "----------------------------------------------------"
                << std::endl;
      std::cerr << "Exception on processing: " << std::endl
                << exc.what() << std::endl
                << "Aborting!" << std::endl
                << "----------------------------------------------------"
                << std::endl;

      return 1;
    }
  catch (...)
    {
      std::cerr << std::endl << std::endl
                << "----------------------------------------------------"
                << std::endl;
      std::cerr << "Unknown exception!" << std::endl
                << "Aborting!" << std::endl
                << "----------------------------------------------------"
                << std::endl;
      return 1;
    }

  return 0;
}



